name: 'Build and upload conda packages'
description: 'Automatic conda package compilation and publication in the speficied Anaconda user or organization.'
author: "Diego Prada-Gracia"
branding:
  icon: "package"
  color: "orange"
inputs:
  meta_yaml_dir:
    description: Path to the directory in the repository where the meta.yaml file is located.
    required: true
  python-version:
    description: Python version of the package to be built.
    required: true
  mambabuild:
    description: Using boa (mambabuild) to build the packages.
    required: false
    default: false
  platform_host:
    description: Target host plaform.
    required: false
    default: true
  platform_all:
    description: Target all supported platforms.
    required: false
    default: false
  platform_linux-64:
    description: Target platform linux-64.
    required: false
    default: false
  platform_linux-32:
    description: Target platform linux-32.
    required: false
    default: false
  platform_osx-64:
    description: Target platform osx-64.
    required: false
    default: false
  platform_osx-arm64:
    description: Target platform osx-arm64.
    required: false
    default: false
  platform_linux-ppc64:
    description: Target platform linux-ppc64.
    required: false
    default: false
  platform_linux-ppc64le:
    description: Target platform linux-ppc64le.
    required: false
    default: false
  platform_linux-s390x:
    description: Target platform linux-s390x.
    required: false
    default: false
  platform_linux-armv6l:
    description: Target platform linux-armv6l.
    required: false
    default: false
  platform_linux-armv7l:
    description: Target platform linux-armv7l.
    required: false
    default: false
  platform_linux-aarch64:
    description: Target platform linux-aarch64.
    required: false
    default: false
  platform_win-32:
    description: Target platform win-32.
    required: false
    default: false
  platform_win-64:
    description: Target platform win-32.
    required: false
    default: false
  upload:
    description: Upload built package to anaconda
    required: false
    default: true
  overwrite:
    description: Do not cancel the uploading if a package with the same name is found already in Anaconda.
    required: false
    default: false
  user:
    description: Name of the Anaconda user or organization where the conda package will be published.
    required: true
  label:
    description: Label of conda package published.
    required: false
    default: auto
  token:
    description: Token to access to anaconda cloud.
    required: false
    default: ''
outputs:
  paths:
    description: Paths for the built packages, in the format 'path1 path2 ... pathN'.
    value: ${{steps.packages-uploading.outputs.paths}}

runs:
  using: "composite"
  steps:
    - name: Getting release data
      id: getting-release-data
      shell: bash
      run: |
        echo "::group::Information of the trigger event"
        echo "Trigger event and type: $GITHUB_EVENT_NAME, ${{github.event.action}}"
        echo "Associated commit SHA and tag: $GITHUB_SHA, $GITHUB_REF"
        echo "::endgroup::"
    - name: Checking if meta.yaml is in meta_yaml_dir
      id: checking-meta_yaml
      shell: bash
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Checking if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.meta_yaml_dir }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.meta_yaml_dir }}."
        fi
        echo "::endgroup::"
    - name: Packages compilation
      id: packages-compilation
      shell: bash -l {0}
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Building conda package for host platform"
        out_dir=`mktemp -d -t compilation-XXXXXXXXXX`
        if "${{ inputs.mambabuild }}"; then
          build_function="mambabuild"
        else
          build_function="build"
        fi
        build_command="conda $build_function . --no-anaconda-upload --output-folder $out_dir --python ${{ inputs.python-version }}"
        echo "$build_command"
        eval "$build_command"
        HOST_PACKAGE=$(eval "$build_command --output")
        echo "Package for host platform compiled as $HOST_PACKAGE"
        du -sh $HOST_PACKAGE
        echo "::endgroup::"
        echo "::group::Building conda package for other platforms"
        if "${{ inputs.platform_all }}"; then
          echo "conda convert -p all $HOST_PACKAGE -o $out_dir"
          conda convert -p all $HOST_PACKAGE -o $out_dir
          echo "Package for all platforms compiled"
        fi
        if "${{ inputs.platform_linux-64 }}"; then
          echo "conda convert -p linux-64 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-64 compiled"
        fi
        if "${{ inputs.platform_osx-64 }}"; then
          echo "conda convert -p osx-64 $HOST_PACKAGE -o $out_dir"
          conda convert -p osx-64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform osx-64 compiled"
        fi
        if "${{ inputs.platform_osx-arm64 }}"; then
          echo "conda convert -p osx-arm64 $HOST_PACKAGE -o $out_dir"
          conda convert -p osx-arm64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform osx-arm64 compiled"
        fi
        if "${{ inputs.platform_linux-32 }}"; then
          echo "conda convert -p linux-32 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-32 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-32 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64 }}"; then
          echo "conda convert -p linux-ppc64 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-ppc64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-ppc64 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64le }}"; then
          echo "conda convert -p linux-ppc64le $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-ppc64le $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-ppc64le compiled"
        fi
        if "${{ inputs.platform_linux-s390x }}"; then
          echo "conda convert -p linux-s390x $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-s390x $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-s390x compiled"
        fi
        if "${{ inputs.platform_linux-armv6l }}"; then
          echo "conda convert -p linux-armv6l $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-armv6l $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-armv6l compiled"
        fi
        if "${{ inputs.platform_linux-armv7l }}"; then
          echo "conda convert -p linux-armv7l $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-armv7l $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-armv7l compiled"
        fi
        if "${{ inputs.platform_linux-aarch64 }}"; then
          echo "conda convert -p linux-aarch64 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-aarch64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-aarch64 compiled"
        fi
        if "${{ inputs.platform_win-32 }}"; then
          echo "conda convert -p win-32 $HOST_PACKAGE -o $out_dir"
          conda convert -p win-32 $HOST_PACKAGE -o $out_dir
          echo "Package for platform win-32 compiled"
        fi
        if "${{ inputs.platform_win-64 }}"; then
          echo "conda convert -p win-64 $HOST_PACKAGE -o $out_dir"
          conda convert -p win-64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform win-64 compiled"
        fi
        if ! "${{ inputs.platform_host }}"; then
          rm $HOST_PACKAGE
          echo "Package for host platform removed"
        fi
        echo "::set-output name=out_dir::'$out_dir'"
        echo "::endgroup::"
    - name: Packages uploading
      id: packages-uploading
      if: inputs.upload == 'true'
      shell: bash -l {0}
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Conda packages uploading"
        #cd ${{ steps.packages-compilation.outputs.out_dir }}
        label=${{ inputs.label }}
        force=""
        if "${{ inputs.overwrite }}"; then
          force="--force"
        fi
        if [ "$label" == "auto" ]; then
          if [ "${{github.event.action}}" == "released" ]; then
             label="main"
          elif [ "${{github.event.action}}" == "prereleased" ]; then
             label="dev"
          else
             echo "The trigger type ${{github.event.action}} is not compatible with `label: auto`"
             exit 1
          fi
        fi
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        SHORT_SHA="$(git rev-parse --short $GITHUB_SHA)"
        package_paths=$(find ${{ steps.packages-compilation.outputs.out_dir }} -type f -name $(basename $HOST_PACKAGE))
        for package_path in $package_paths; do
            command="anaconda upload --user ${{ inputs.user }} $force --label $label $package_path"
            echo "$command"
            eval "$command"
            paths+=($package_path)
        done
        echo "paths=${paths[@]}" >> $GITHUB_OUTPUT 
        echo "::endgroup::"

